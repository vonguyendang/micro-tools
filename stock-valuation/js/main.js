/**
 * main.js
 * File ch√≠nh ƒë·ªÉ ƒëi·ªÅu khi·ªÉn giao di·ªán v√† kh·ªüi t·∫°o ·ª©ng d·ª•ng.
 */

// Khai b√°o c√°c bi·∫øn cho c√°c b·∫£ng ·ªü ph·∫°m vi to√†n c·ª•c c·ªßa file
let registeredTable, approvedTable, generalEventsTable, hoseEventsTable;

/**
 * Hi·ªÉn th·ªã tab ƒë∆∞·ª£c ch·ªçn v√† ·∫©n c√°c tab kh√°c.
 * K√≠ch ho·∫°t vi·ªác t·∫£i d·ªØ li·ªáu cho c√°c tab m·ªõi khi ch√∫ng ƒë∆∞·ª£c m·ªü l·∫ßn ƒë·∫ßu.
 * @param {string} tabId - ID c·ªßa container tab c·∫ßn hi·ªÉn th·ªã.
 */
function showTab(tabId) {
    // ·∫®n t·∫•t c·∫£ c√°c container
    const containers = document.querySelectorAll('.container');
    containers.forEach(container => {
        container.style.display = 'none';
        container.classList.remove('active-container');
    });

    // B·ªè tr·∫°ng th√°i 'active' kh·ªèi t·∫•t c·∫£ c√°c n√∫t tab
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(tab => tab.classList.remove('active'));

    // Hi·ªÉn th·ªã container ƒë∆∞·ª£c ch·ªçn
    const selectedContainer = document.getElementById(tabId);
    if (selectedContainer) {
        selectedContainer.style.display = 'block';
        selectedContainer.classList.add('active-container');
    }

    // ƒê√°nh d·∫•u n√∫t tab ƒë∆∞·ª£c ch·ªçn l√† 'active'
    const selectedTab = document.querySelector(`.tab[onclick="showTab('${tabId}')"]`);
     if (selectedTab) {
        selectedTab.classList.add('active');
    }
    
    // T·∫£i d·ªØ li·ªáu cho c√°c tab m·ªõi khi ƒë∆∞·ª£c truy c·∫≠p l·∫ßn ƒë·∫ßu ti√™n
    if (tabId === 'tab3' && !registeredTable) {
        initializeListingTabs();
    } else if (tabId === 'tab4' && !generalEventsTable && !hoseEventsTable) {
        initializeEventsTabs();
    } else if (tabId === 'tab-admin') {
        initializeAdminTab();
    }
}

/**
 * H√†m m·ªõi ƒë·ªÉ m·ªü URL c·ªßa web trong m·ªôt tab m·ªõi.
 * @param {string} url - ƒê∆∞·ªùng d·∫´n ƒë·∫øn trang web.
 */
function openWebUrl(url) {
    window.open(url, '_blank');
}

/**
 * H√†m m·ªõi ƒë·ªÉ m·ªü iframe PTKT ·ªü ch·∫ø ƒë·ªô to√†n m√†n h√¨nh.
 */
function openFullscreenPTKT() {
    const iframe = document.getElementById('ptkt-iframe');
    if (iframe) {
        if (iframe.requestFullscreen) {
            iframe.requestFullscreen();
        } else if (iframe.webkitRequestFullscreen) { /* Safari */
            iframe.webkitRequestFullscreen();
        } else if (iframe.msRequestFullscreen) { /* IE11 */
            iframe.msRequestFullscreen();
        } else {
             alert('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ch·∫ø ƒë·ªô to√†n m√†n h√¨nh.');
        }
    }
}

// =================================================================
// LOGIC KHU V·ª∞C TH√îNG B√ÅO (C·∫¨P NH·∫¨T)
// =================================================================

/**
 * T√¨m ng√†y ƒë√°o h·∫°n ph√°i sinh ti·∫øp theo (Th·ª© 5 tu·∫ßn th·ª© 3 c·ªßa th√°ng).
 * @returns {Date} ƒê·ªëi t∆∞·ª£ng Date cho ng√†y ƒë√°o h·∫°n ti·∫øp theo.
 */
function getNextDerivativeExpirationDate() {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    let year = today.getFullYear();
    let month = today.getMonth();

    for (let i = 0; i < 24; i++) {
        const firstDayOfMonth = new Date(year, month, 1);
        const dayOfWeek = firstDayOfMonth.getDay();

        const daysUntilFirstThursday = (4 - dayOfWeek + 7) % 7;
        const firstThursday = 1 + daysUntilFirstThursday;

        const thirdThursday = firstThursday + 14;

        const expirationDate = new Date(year, month, thirdThursday);

        if (expirationDate >= today) {
            return expirationDate;
        }

        month++;
        if (month > 11) {
            month = 0;
            year++;
        }
    }
    return null;
}

/**
 * T·∫°o n·ªôi dung HTML cho th√¥ng b√°o ƒë√°o h·∫°n ph√°i sinh t·ª± ƒë·ªông.
 * @returns {string|null} Chu·ªói HTML c·ªßa th√¥ng b√°o, ho·∫∑c null n·∫øu kh√¥ng c√≥.
 */
function generateDerivativeNotification() {
    const expirationDate = getNextDerivativeExpirationDate();
    if (!expirationDate) return null;

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const timeDiff = expirationDate.getTime() - today.getTime();
    const daysRemaining = Math.ceil(timeDiff / (1000 * 3600 * 24));

    // B·ªè qua n·∫øu ƒë√£ qua ng√†y ƒë√°o h·∫°n
    if (daysRemaining < 0) return null;

    const day = String(expirationDate.getDate()).padStart(2, '0');
    const month = String(expirationDate.getMonth() + 1).padStart(2, '0');
    const year = expirationDate.getFullYear();

    const expirationMonth = expirationDate.getMonth() + 1;
    const isQuarterlyMonth = [3, 6, 9, 12].includes(expirationMonth);
    const icon = isQuarterlyMonth ? 'üî•üî•üî•' : 'üî•';
    
    let countdownText = "";
    if (daysRemaining > 1) {
        countdownText = `, ƒë·∫øm ng∆∞·ª£c c√≤n ${daysRemaining} ng√†y n·ªØa!`;
    } else if (daysRemaining === 1) {
        countdownText = `, ƒë·∫øm ng∆∞·ª£c c√≤n 1 ng√†y n·ªØa!`;
    } else if (daysRemaining === 0) {
        countdownText = `, ƒë√°o h·∫°n H√îM NAY!`;
    }

    // *** LOGIC M·ªöI ƒê·ªÇ CH·ªåN LO·∫†I TH√îNG B√ÅO ***
    let notificationType = 'info'; // M·∫∑c ƒë·ªãnh
    if (daysRemaining <= 3) {
        notificationType = 'alert'; // D∆∞·ªõi 3 ng√†y: B√°o ƒë·ªông (ƒê·ªè)
    } else if (daysRemaining <= 7) {
        notificationType = 'warning'; // D∆∞·ªõi 7 ng√†y: C·∫£nh b√°o (V√†ng)
    } else if (daysRemaining < 14) {
        notificationType = 'info'; // D∆∞·ªõi 14 ng√†y: Th√¥ng tin (Xanh d∆∞∆°ng)
    } else { // >= 14 ng√†y
        notificationType = 'success'; // Tr√™n 14 ng√†y: Th√†nh c√¥ng (Xanh l√°)
    }
    // *** K·∫æT TH√öC LOGIC M·ªöI ***

    const message = `Ch√∫ √Ω: ƒê√°o h·∫°n ph√°i sinh v√†o Th·ª© NƒÉm, ng√†y ${day}/${month}/${year}${countdownText}`;
    
    return `<div class="notification-item type-${notificationType}"><span class="notification-icon">${icon}</span><span class="notification-text">${message}</span></div>`;
}


/**
 * L·∫•y c√°c th√¥ng b√°o t√πy ch·ªânh t·ª´ file JSON tr√™n server.
 * @returns {Promise<string>} M·ªôt Promise tr·∫£ v·ªÅ chu·ªói HTML ch·ª©a c√°c th√¥ng b√°o.
 */
async function fetchCustomNotifications() {
    try {
        const response = await fetch('api/notifications.php', { cache: 'no-store' });
        if (!response.ok) throw new Error(`L·ªói m·∫°ng: ${response.statusText}`);
        
        const notifications = await response.json();
        
        if (Array.isArray(notifications)) {
            const icons = {
                info: 'üì¢',
                success: '‚úÖ',
                warning: '‚ö†Ô∏è',
                alert: 'üö®'
            };

            return notifications
                .filter(n => n.active && n.message)
                .map(n => {
                    const type = n.type || 'info';
                    const icon = icons[type] || 'üì¢';
                    return `<div class="notification-item type-${type}"><span class="notification-icon">${icon}</span><span class="notification-text">${n.message}</span></div>`;
                })
                .join('');
        }
        return '';
    } catch (e) {
        console.error("L·ªói khi t·∫£i th√¥ng b√°o t√πy ch·ªânh:", e);
        return `<div class="notification-item type-alert"><span class="notification-icon">‚ö†Ô∏è</span><span class="notification-text">Kh√¥ng th·ªÉ t·∫£i c√°c th√¥ng b√°o t√πy ch·ªânh.</span></div>`;
    }
}

/**
 * Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c th√¥ng b√°o h·ª£p l·ªá trong khu v·ª±c th√¥ng b√°o.
 */
async function displayNotifications() {
    const notificationBar = document.getElementById('notification-bar');
    if (!notificationBar) return;

    const customMsgs = await fetchCustomNotifications();
    const derivativeMsg = generateDerivativeNotification();

    // Hi·ªÉn th·ªã th√¥ng b√°o t√πy ch·ªânh tr∆∞·ªõc, sau ƒë√≥ ƒë·∫øn th√¥ng b√°o ph√°i sinh
    let allMessagesHTML = customMsgs + (derivativeMsg || '');

    if (allMessagesHTML) {
        notificationBar.innerHTML = allMessagesHTML;
        notificationBar.style.display = 'block';
    } else {
        notificationBar.style.display = 'none';
    }
}

// L·∫Øng nghe s·ª± ki·ªán khi to√†n b·ªô n·ªôi dung trang ƒë√£ ƒë∆∞·ª£c t·∫£i xong
document.addEventListener('DOMContentLoaded', () => {
    showTab('tab1');
    displayNotifications();
});